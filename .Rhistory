k_function <- function(year_input) {
subset <- acled_sub %>% filter(year %in% year_input)
subset_spdf <- SpatialPointsDataFrame(coords = subset[,c("longitude", "latitude")],
data = subset[,c("year", "event_type", "admin2", "fatalities")])
# subset cases and controls into separate objects
cases <- subset_spdf[subset$i_extreme %in% 1, ]
controls <- subset_spdf[subset$i_extreme %in% 0, ]
# generate k function for CASES
cases_ppp <- cases %>% as("ppp")
# note different border-corrected estimates ('iso', 'border' and 'trans')
K <- cases_ppp %>% Kest(correction=c("isotropic", "Ripley")) # uses the "spatstat" package
# Plot the estimate of K(r) for CASES using MC simulation for the confidence interval/envelope
par(mfrow=c(1,1))
E <- cases_ppp %>% envelope(Kest, nsim=999)
E %>% plot(main=paste0("Monte Carlo Sim., Ripleys K for 'Extreme Violence' Events - ", as.character(year_input)),
xlab="Distances (r)", lwd = 3,
ylab="K-function K(r)")
} # Ripleys k function
for(i in 2005:2020){
jpeg(file=paste0("k-function-graphs/kfunction_", as.character(i), ".jpeg"))
k_function(i)
dev.off()
}
library(shiny); runApp('03-initial-leaflet.R')
# visualization
library(rgdal)
# read in csv
acled <- read.csv("1900-01-01-2020-05-06-Sudan.csv", sep = ";") # Sudan
# select for year 2005+ (after CPA was signed), filter, and mutate
acled_sub <- acled %>% select(year, event_type, admin2, fatalities, longitude, latitude) %>%
filter(year >= 2005) %>%
mutate(i_extreme = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
1, 0),
i_extreme_label = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
'Extreme violence', 'Non-extreme violence'))
library(raster)
library(ggplot2)
# visualization
library(rgdal)
library(raster)
library(ggplot2)
library(spatstat)
library(plotrix)
library(fields)
library(leaflet)
library(maptools)
library(RColorBrewer)
library(lattice)
library(geoR)
library(plotrix)
# spatial data management and point process analysis
library(sp)
library(tidyverse)
library(gtools)
# Moran's I and spatial dependencies
library(spdep) # Spatial Dependence: Weighting Schemes, Statistics and Models
library(ape) # Analyses of Phylogenetics and Evolution
library(pgirmess) # Data Analysis in Ecology
# point processes
library(spatstat)
library(splancs) # K-function
library(smacpod) # Spatial scanning statistic
library(car) # contains a function for logistic transformation (log odds ratio) to make more normal
library(leaflet)
library(tidyverse)
library(gganimate)
library(magick)
library(shiny)
library(xts)
# read in csv
acled <- read.csv("1900-01-01-2020-05-06-Sudan.csv", sep = ";") # Sudan
# select for year 2005+ (after CPA was signed), filter, and mutate
acled_sub <- acled %>% select(year, event_type, admin2, fatalities, longitude, latitude) %>%
filter(year >= 2005) %>%
mutate(i_extreme = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
1, 0),
i_extreme_label = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
'Extreme violence', 'Non-extreme violence'))
runApp('03-initial-leaflet.R')
library(shiny); runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet.R')
rsconnect::setAccountInfo(name='sri-ramesh',
token='C3A6E586447061E054CDA73A51FD1C80',
secret='TYcMcjILuwuQ0Pvb9NZj4QAkHmUjMYzevSOubAAy')
rsconnect::setAccountInfo(name='sri-ramesh',
token='C3A6E586447061E054CDA73A51FD1C80',
secret='TYcMcjILuwuQ0Pvb9NZj4QAkHmUjMYzevSOubAAy')
library(rsconnect)
runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet.R')
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet.R')
install.ffmpeg()
install.ffmpeg()
library(ffmpeg)
install.packages("mapmate")
ffmpeg
??ffmpeg
library(knitr)
opts_knit$set(animation.fun = hook_scianimator)
hook_scianimator
install.packages("remotes")
remotes::install_github("pmur002/ffmpeg")
make_gif <- function(path, str) {
## list file names and read in
imgs <- list.files(path, full.names = TRUE)
img_list <- lapply(imgs, image_read)
## join the images together
img_joined <- image_join(img_list)
## animate at 2 frames per second
img_animated <- image_animate(img_joined, fps = 1)
## view animated image
img_animated
## save to disk
image_write(image = img_animated, path = paste0(path, str, '.gif'))
}
kde <- function(year_input) {
subset <- acled_sub %>% filter(year %in% year_input)
subset_spdf <- SpatialPointsDataFrame(
coords = subset[,c("longitude", "latitude")],
data = subset[,c("year", "event_type", "admin2", "fatalities")])
# define window
subset_win <- owin(xrange=range(subset$longitude),
yrange=range(subset$latitude))
# make ppp object
subset_battles_ppp <- ppp(subset$longitude, subset$latitude, window = subset_win,
marks=as.factor(subset$i_extreme))
# plot bandwidths
subset_battles_ppp %>% density(bw.ppl) %>% plot(main = paste0("Hotspot Map of E.P.V., ",
as.character(year_input)),
col = heat.colors(10))
} # kernel density estimate
for(i in 2005:2011){
jpeg(file=paste0("high-kde-graphs/kde_", as.character(i), ".jpeg"))
kde(i)
dev.off()
}
# visualization
library(ggplot2)
library(spatstat)
library(plotrix)
library(fields)
library(leaflet)
library(maptools)
library(RColorBrewer)
library(lattice)
library(geoR)
library(plotrix)
# spatial data management and point process analysis
library(sp)
library(gtools)
# point processes
library(spatstat)
library(splancs) # K-function
library(smacpod) # Spatial scanning statistic
library(car) # contains a function for logistic transformation (log odds ratio) to make more normal
library(leaflet)
library(tidyverse)
library(shiny)
library(xts)
library(magick)
library(RcppArmadillo)
install.packages("RcppArmadillo")
# read in csv
acled <- read.csv("1900-01-01-2020-05-06-Sudan.csv", sep = ";") # Sudan
# select for year 2005+ (after CPA was signed), filter, and mutate
acled_sub <- acled %>% select(year, event_type, admin2, fatalities, longitude, latitude) %>%
filter(year >= 2005) %>%
mutate(i_extreme = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
1, 0),
i_extreme_label = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
'Extreme violence', 'Non-extreme violence'))
install.packages("RcppArmadillo")
# make a gif
make_gif <- function(path, str) {
## list file names and read in
imgs <- list.files(path, full.names = TRUE)
img_list <- lapply(imgs, image_read)
## join the images together
img_joined <- image_join(img_list)
## animate at 2 frames per second
img_animated <- image_animate(img_joined, fps = 1)
## view animated image
img_animated
## save to disk
image_write(image = img_animated, path = paste0(path, str, '.gif'))
}
kde <- function(year_input) {
subset <- acled_sub %>% filter(year %in% year_input)
subset_spdf <- SpatialPointsDataFrame(
coords = subset[,c("longitude", "latitude")],
data = subset[,c("year", "event_type", "admin2", "fatalities")])
# define window
subset_win <- owin(xrange=range(subset$longitude),
yrange=range(subset$latitude))
# make ppp object
subset_battles_ppp <- ppp(subset$longitude, subset$latitude, window = subset_win,
marks=as.factor(subset$i_extreme))
# plot bandwidths
subset_battles_ppp %>% density(bw.ppl) %>% plot(main = paste0("Hotspot Map of E.P.V., ",
as.character(year_input)),
col = heat.colors(10))
} # kernel density estimate
for(i in 2005:2011){
jpeg(file=paste0("high-kde-graphs/kde_", as.character(i), ".jpeg"))
kde(i)
dev.off()
}
make_gif(path = 'high-kde-graphs/', str = 'high-kde')
for(i in 2012:2020){
jpeg(file=paste0("low-kde-graphs/kde_", as.character(i), ".jpeg"))
kde(i)
dev.off()
}
make_gif(path = 'low-kde-graphs/', str = 'low-kde')
# visualization
library(ggplot2)
library(spatstat)
library(plotrix)
library(fields)
library(leaflet)
library(maptools)
library(RColorBrewer)
library(lattice)
library(geoR)
library(plotrix)
# spatial data management and point process analysis
library(sp)
library(gtools)
# point processes
library(spatstat)
library(splancs) # K-function
library(smacpod) # Spatial scanning statistic
library(car) # contains a function for logistic transformation (log odds ratio) to make more normal
library(leaflet)
library(tidyverse)
library(shiny)
library(xts)
library(magick)
library(RcppArmadillo)
install.packages("RcppArmadillo")
install.packages("RcppArmadillo")
# visualization
library(ggplot2)
library(spatstat)
library(plotrix)
library(fields)
library(leaflet)
library(maptools)
library(RColorBrewer)
library(lattice)
library(geoR)
library(plotrix)
# spatial data management and point process analysis
library(sp)
library(gtools)
# point processes
library(spatstat)
library(splancs) # K-function
library(smacpod) # Spatial scanning statistic
library(car) # contains a function for logistic transformation (log odds ratio) to make more normal
library(leaflet)
library(tidyverse)
library(shiny)
library(xts)
library(magick)
# read in csv
acled <- read.csv("1900-01-01-2020-05-06-Sudan.csv", sep = ";") # Sudan
# select for year 2005+ (after CPA was signed), filter, and mutate
acled_sub <- acled %>% select(year, event_type, admin2, fatalities, longitude, latitude) %>%
filter(year >= 2005) %>%
mutate(i_extreme = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
1, 0),
i_extreme_label = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
'Extreme violence', 'Non-extreme violence'))
# make a gif
make_gif <- function(path, str) {
## list file names and read in
imgs <- list.files(path, full.names = TRUE)
img_list <- lapply(imgs, image_read)
## join the images together
img_joined <- image_join(img_list)
## animate at 2 frames per second
img_animated <- image_animate(img_joined, fps = 1)
## view animated image
img_animated
## save to disk
image_write(image = img_animated, path = paste0(path, str, '.gif'))
}
kde <- function(year_input) {
subset <- acled_sub %>% filter(year %in% year_input)
subset_spdf <- SpatialPointsDataFrame(
coords = subset[,c("longitude", "latitude")],
data = subset[,c("year", "event_type", "admin2", "fatalities")])
# define window
subset_win <- owin(xrange=range(subset$longitude),
yrange=range(subset$latitude))
# make ppp object
subset_battles_ppp <- ppp(subset$longitude, subset$latitude, window = subset_win,
marks=as.factor(subset$i_extreme))
# plot bandwidths
subset_battles_ppp %>% density(bw.ppl) %>% plot(main = paste0("Hotspot Map of E.P.V., ",
as.character(year_input)),
col = heat.colors(10))
} # kernel density estimate
for(i in 2005:2011){
jpeg(file=paste0("high-kde-graphs/kde_", as.character(i), ".jpeg"))
kde(i)
dev.off()
}
make_gif(path = 'high-kde-graphs/', str = 'high-kde')
for(i in 2012:2020){
jpeg(file=paste0("low-kde-graphs/kde_", as.character(i), ".jpeg"))
kde(i)
dev.off()
}
make_gif(path = 'low-kde-graphs/', str = 'low-kde')
k_function <- function(year_input) {
subset <- acled_sub %>% filter(year %in% year_input)
subset_spdf <- SpatialPointsDataFrame(coords = subset[,c("longitude", "latitude")],
data = subset[,c("year", "event_type", "admin2", "fatalities")])
# subset cases and controls into separate objects
cases <- subset_spdf[subset$i_extreme %in% 1, ]
controls <- subset_spdf[subset$i_extreme %in% 0, ]
# generate k function for CASES
cases_ppp <- cases %>% as("ppp")
# note different border-corrected estimates ('iso', 'border' and 'trans')
K <- cases_ppp %>% Kest(correction=c("isotropic", "Ripley")) # uses the "spatstat" package
# Plot the estimate of K(r) for CASES using MC simulation for the confidence interval/envelope
par(mfrow=c(1,1))
E <- cases_ppp %>% envelope(Kest, nsim=999)
E %>% plot(main=paste0("Monte Carlo Sim. of K-Function for E.P.V, ", as.character(year_input)),
xlab="Distances (r)", lwd = 3,
ylab="K-function K(r)")
} # Ripleys k function
k_function <- function(year_input) {
subset <- acled_sub %>% filter(year %in% year_input)
subset_spdf <- SpatialPointsDataFrame(coords = subset[,c("longitude", "latitude")],
data = subset[,c("year", "event_type", "admin2", "fatalities")])
# subset cases and controls into separate objects
cases <- subset_spdf[subset$i_extreme %in% 1, ]
controls <- subset_spdf[subset$i_extreme %in% 0, ]
# generate k function for CASES
cases_ppp <- cases %>% as("ppp")
# note different border-corrected estimates ('iso', 'border' and 'trans')
K <- cases_ppp %>% Kest(correction=c("isotropic", "Ripley")) # uses the "spatstat" package
# Plot the estimate of K(r) for CASES using MC simulation for the confidence interval/envelope
par(mfrow=c(1,1))
E <- cases_ppp %>% envelope(Kest, nsim=999)
E %>% plot(main=paste0("Monte Carlo Sim. of K-Function for E.P.V, ", as.character(year_input)),
xlab="Distances (r)", lwd = 3,
ylab="K-function K(r)")
} # Ripleys k function
for(i in 2005:2020){
jpeg(file=paste0("k-function-graphs/kfunction_", as.character(i), ".jpeg"))
k_function(i)
dev.off()
}
make_gif(path = 'k-function-graphs/', str = 'k-function')
runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet-fatalities.R')
runApp('03-initial-leaflet-fatalities.R')
runApp('03-initial-leaflet-fatalities.R')
library(shiny)
runApp()
library(rsconnect)
deployApp()
runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet.R')
library(shiny)
runApp()
library(shiny); runApp('03-initial-leaflet.R')
library(shiny)
runApp()
library(shiny)
runApp()
library(shiny)
runApp()
# visualization
library(ggplot2)
library(spatstat)
library(plotrix)
library(fields)
library(leaflet)
library(maptools)
library(RColorBrewer)
library(lattice)
library(geoR)
library(plotrix)
# spatial data management and point process analysis
library(sp)
library(gtools)
# point processes
library(spatstat)
library(splancs) # K-function
library(smacpod) # Spatial scanning statistic
library(car) # contains a function for logistic transformation (log odds ratio) to make more normal
library(leaflet)
library(tidyverse)
library(shiny)
library(xts)
library(magick)
# visualization
library(ggplot2)
library(spatstat)
library(plotrix)
library(fields)
library(leaflet)
library(maptools)
library(RColorBrewer)
library(lattice)
library(plotrix)
# spatial data management and point process analysis
library(sp)
library(gtools)
# point processes
library(spatstat)
library(splancs) # K-function
library(smacpod) # Spatial scanning statistic
library(car) # contains a function for logistic transformation (log odds ratio) to make more normal
library(leaflet)
library(tidyverse)
library(shiny)
library(xts)
library(magick)
# read in csv
acled <- read.csv("1900-01-01-2020-05-06-Sudan.csv", sep = ";") # Sudan
# select for year 2005+ (after CPA was signed), filter, and mutate
acled_sub <- acled %>% select(year, event_type, admin2, fatalities, longitude, latitude) %>%
filter(year >= 2005) %>%
mutate(i_extreme = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
1, 0),
i_extreme_label = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
'Extreme violence', 'Non-extreme violence'))
View(acled_sub)
View(acled)
acled %>% filter(event_type == 'Protests')
df <- acled %>% filter(event_type == 'Protests')
View(df)
df2 <- acled %>% filter(event_type == 'Protests' & "sub_event_type" == 'Excessive force against protesters')
df2 <- df %>% filter("sub_event_type" == 'Excessive force against protesters')
acled_sub <- acled %>% select(year, event_type, admin2, fatalities, longitude, latitude) %>%
filter(year >= 2005) %>%
mutate(i_extreme = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
1, 0),
i_extreme_label = ifelse(event_type %in% "Battles" |
event_type %in% "Explosions/Remote violence" |
event_type %in% "Violence against civilians",
'Extreme violence', 'Non-extreme violence'))
# visualization
library(ggplot2)
library(spatstat)
library(plotrix)
library(fields)
library(leaflet)
library(maptools)
library(RColorBrewer)
library(lattice)
library(geoR)
library(plotrix)
library(RcppArmadillo)
# spatial data management and point process analysis
library(sp)
library(gtools)
# point processes
library(spatstat)
library(splancs) # K-function
library(smacpod) # Spatial scanning statistic
library(car) # contains a function for logistic transformation (log odds ratio) to make more normal
library(leaflet)
library(tidyverse)
library(shiny)
library(xts)
acled <- read.csv("SL/1900-01-01-2020-05-06-Chile.csv", sep = ";") # Sudan
View(acled)
runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet.R')
View(acled)
runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet.R')
runApp('03-initial-leaflet.R')
runApp('map-chile-for-enzo.R')
runApp('map-chile-for-enzo.R')
runApp('map-chile-for-enzo.R')
